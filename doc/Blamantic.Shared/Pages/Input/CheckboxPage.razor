@page "/component/input/checkbox"

<Pager DataSource="@(new List<string>
                   {
                       "Checkbox","Radio","Read-only","Disabled","Fitted","Inverted"
                   })">
    <Body>
        <Header1>
            Checkbox
            <SubHeader>A checkbox allows a user to select a value from a small set of options, often binary</SubHeader>
        </Header1>
        <PresentationPart Title="Checkbox">
            <RunTemplate>
                <CheckBox DisplayName="Standard" @bind-Value="Agree" />
                <br />
                <br />
                <CheckBox DisplayName="Switch" @bind-Value="Toggle" DisplayStyle="CheckBox.Style.Switch" />
                <br />
                <br />
                <CheckBox DisplayName="Slider" @bind-Value="Slider" DisplayStyle="CheckBox.Style.Slider" />
            </RunTemplate>
            <CodeTemplate>
                @Code.GetCode(@"
```html
<CheckBox DisplayName=""Standard"" @bind-Value=""Agree""/>
<CheckBox DisplayName=""Switch"" @bind-Value=""Toggle"" DisplayStyle=""CheckBox.Style.Switch"" />
<CheckBox DisplayName=""Slider"" @bind-Value=""Slider"" DisplayStyle=""CheckBox.Style.Slider"" />
```
")
            </CodeTemplate>
        </PresentationPart>
        <PresentationPart Title="Radio">
            <Description>
                <code>RadioGroup</code> is a container for each <code>RadioBox</code> of option.
            </Description>
            <RunTemplate>
                <RadioGroup @bind-Value="Fruit" DisplayName="Please choose one fruit">
                    <RadioBox Value="@("Apple")" Text="Apple" />
                    <RadioBox Value="@("Banana")" Text="Banana" />
                    <RadioBox Value="@("Orange")" Text="Orange" />
                </RadioGroup>
            </RunTemplate>
            <CodeTemplate>
                @Code.GetCode(@"
```html
<RadioGroup @bind-Value=""Fruit"" DisplayName=""请选择一个水果"">
    <RadioBox Value=""@(""Apple"")"" Text=""Apple"" />
    <RadioBox Value=""@(""Banana"")"" Text=""Banana"" />
    <RadioBox Value=""@(""Orange"")"" Text=""Orange"" />
</RadioGroup>
```
")
            </CodeTemplate>
        </PresentationPart>
        <PresentationPart Title="Read-only">
            <Description>
                A checkbox can be read-only and unable to change states
            </Description>
            <RunTemplate>
                <CheckBox ReadOnly DisplayName="Stadard" @bind-Value="Agree" />
                <br />
                <br />
                <CheckBox ReadOnly DisplayName="Switch" @bind-Value="Toggle" DisplayStyle="CheckBox.Style.Switch" />
                <br />
                <br />
                <CheckBox ReadOnly DisplayName="Slider" @bind-Value="Slider" DisplayStyle="CheckBox.Style.Slider" />
            </RunTemplate>
            <CodeTemplate>
                @Code.GetCode(@"
```html
<CheckBox ReadOnly DisplayName=""Stadard"" @bind-Value=""Agree""/>
<CheckBox ReadOnly DisplayName=""Switch"" @bind-Value=""Toggle"" DisplayStyle=""CheckBox.Style.Switch"" />
<CheckBox ReadOnly DisplayName=""Slider"" @bind-Value=""Slider"" DisplayStyle=""CheckBox.Style.Slider"" />
```
")
            </CodeTemplate>
        </PresentationPart>
        <PresentationPart Title="Disabled">
            <Description>
                A checkbox can show it is currently unable to be interacted with
            </Description>
            <RunTemplate>
                <CheckBox Disabled DisplayName="Stadard" @bind-Value="Agree" />
                <br />
                <br />
                <CheckBox Disabled DisplayName="Switch" @bind-Value="Toggle" DisplayStyle="CheckBox.Style.Switch" />
                <br />
                <br />
                <CheckBox Disabled DisplayName="Slider" @bind-Value="Slider" DisplayStyle="CheckBox.Style.Slider" />
            </RunTemplate>
            <CodeTemplate>
                @Code.GetCode(@"
```html
<CheckBox Disabled DisplayName=""Stadard"" @bind-Value=""Agree""/>
<CheckBox Disabled DisplayName=""Switch"" @bind-Value=""Toggle"" DisplayStyle=""CheckBox.Style.Switch"" />
<CheckBox Disabled DisplayName=""Slider"" @bind-Value=""Slider"" DisplayStyle=""CheckBox.Style.Slider"" />
```
")
            </CodeTemplate>
        </PresentationPart>
        <PresentationPart Title="Fitted">
            <Description>
                A fitted checkbox does not leave padding for a label
            </Description>
            <RunTemplate>
                    <CheckBox Fitted @bind-Value="Agree" />
                    <CheckBox Fitted @bind-Value="Toggle" DisplayStyle="CheckBox.Style.Switch" />
                    <CheckBox Fitted @bind-Value="Slider" DisplayStyle="CheckBox.Style.Slider" />
            </RunTemplate>
            <CodeTemplate>
                @Code.GetCode(@"
```html
<CheckBox Fitted @bind-Value=""Agree""/>
<CheckBox Fitted @bind-Value=""Toggle"" DisplayStyle=""CheckBox.Style.Switch"" />
<CheckBox Fitted @bind-Value=""Slider"" DisplayStyle=""CheckBox.Style.Slider"" />
```
")
            </CodeTemplate>
        </PresentationPart>
        <PresentationPart Title="Inverted">
            <Description>
                A inverted checkbox
            </Description>
            <RunTemplate>
                <Segment Inverted>
                    <CheckBox Inverted DisplayName="Stadard" @bind-Value="Agree" />
                    <br />
                    <br />
                    <CheckBox Inverted DisplayName="Switch" @bind-Value="Toggle" DisplayStyle="CheckBox.Style.Switch" />
                    <br />
                    <br />
                    <CheckBox Inverted DisplayName="Slider" @bind-Value="Slider" DisplayStyle="CheckBox.Style.Slider" />
                </Segment>
            </RunTemplate>
            <CodeTemplate>
                @Code.GetCode(@"
```html
<CheckBox Inverted DisplayName=""Stadard"" @bind-Value=""Agree""/>
<CheckBox Inverted DisplayName=""Switch"" @bind-Value=""Toggle"" DisplayStyle=""CheckBox.Style.Switch"" />
<CheckBox Inverted DisplayName=""Slider"" @bind-Value=""Slider"" DisplayStyle=""CheckBox.Style.Slider"" />
```
")
            </CodeTemplate>
        </PresentationPart>
    </Body>
</Pager>

@code{
    bool Agree { get; set; }
    bool Toggle { get; set; }
    bool Slider { get; set; }
    string Fruit { get; set; }
}