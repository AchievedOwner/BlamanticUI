@page "/component/input/dropdown"

<Pager DataSource="@(new List<string>(new[] { 
                         "示例","格式化显示","上拉列表","双向绑定","表单验证","自定义默认项","过滤",
                         "可移除","去掉边框","行内样式","禁用状态","尺寸","压缩内边距","反转背景颜色","列数排版","搜索时候选项最大值",
                         "自定义过滤方式",
                         "参数","事件","方法"
                     }))">
    <Body>
        <Header1 Divider="true">
            下拉列表
            <SubHeader>
                下拉列表允许用户从一系列选项中选择一个值
            </SubHeader>
        </Header1>
        <Segment>
            使用 <code>&lt;DropDownList></code> 组件并设置 <code>DataSource</code> 可以通过数据源加载下拉菜单的选项。
        </Segment>
        <br />
        示例使用的数据源代码如下：
        @Code.GetCode(@"
```csharp
class User
{
    public int Id { get; set; }
    public string Name { get; set; }
    public string Avatar { get; set; }

    public override string ToString() => Name;
}

IReadOnlyList<User> Users => new List<User>
{
    new User{ Id = 1, Name = ""Zoe"" , Avatar=""zoe.jpg"" },
    new User{ Id = 2, Name = ""Stevie"" , Avatar=""stevie.jpg"" },
    new User{ Id = 3, Name = ""Jenny"" , Avatar=""jenny.jpg"" },
    new User{ Id = 4, Name = ""Christian"" , Avatar=""christian.jpg"" },
    new User{ Id = 5, Name = ""Ade"" , Avatar=""ade.jpg"" },
    new User{ Id = 6, Name = ""Veronika"" , Avatar=""veronika.jpg"" },
    new User{ Id = 7, Name = ""Nan"" , Avatar=""nan.jpg"" },
    new User{ Id = 8, Name = ""Elliot"" , Avatar=""elliot.jpg"" }
};
```
")

        <PresentationPart Title="示例">
            <Description>
                设置 <code>DataSource</code> 动态加载下拉菜单的选项。
            </Description>
            <RunTemplate>
                <DropDownList DataSource="Users" />
            </RunTemplate>
            <CodeTemplate>
        @Code.GetCode(@"
```html
<DropDownList DataSource=""Users""/>
```
")
            </CodeTemplate>
        </PresentationPart>
        <PresentationPart Title="格式化显示">
            <Description>
                设置 <code>ItemFormat</code> 可以对下拉项自定义格式化。
            </Description>
            <RunTemplate>
                <DropDownList DataSource="Users">
                    <ItemFormat>
                        <Avatar Source="@context.Avatar" />
                        @context.Name
                    </ItemFormat>
                </DropDownList>
            </RunTemplate>
            <CodeTemplate>
        @Code.GetCode(@"
```html
<DropDownList DataSource=""Users"">
    <ItemFormat>
        <Avatar Source=""@context.Avatar"" />
        @context.Name
    </ItemFormat>
</DropDownList>
```
")
            </CodeTemplate>
        </PresentationPart>
        <PresentationPart Title="上拉列表">
            <Description>
                设置 <code>Up="true"</code> 使菜单向上显示。
            </Description>
            <RunTemplate>
                <DropDownList DataSource="Users" Up="true" />
            </RunTemplate>
            <CodeTemplate>
        @Code.GetCode(@"
```html
<DropDownList DataSource=""Users"" Up=""true""/>
```
")
            </CodeTemplate>
        </PresentationPart>
        <PresentationPart Title="双向绑定">
            <Description>
                使用 <code>@@bind-Value</code> 可支持选择对象的双向绑定。
            </Description>
            <RunTemplate>
                <DropDownList T="User" @bind-Value="SelectUserName" DataSource="Users" OnItemSelected="value=>SelectUser=value" />
                绑定的值: @SelectUserName
                @if (SelectUser != null)
                {
                    <Content>
                        <Avatar Source="@SelectUser.Avatar" />
                        @SelectUser.Name
                    </Content>
                }
            </RunTemplate>
            <CodeTemplate>
        @Code.GetCode(@"
```html
<DropDownList TSource=""User"" @bind-Value=""SelectUserName"" DataSource=""Users"" OnItemSelected=""value=>SelectUser=value"" />
绑定的值: @SelectUserName
@if (SelectUser != null)
{
    <Content>
        <Avatar Source=""@SelectUser.Avatar"" />
        @SelectUser.Name
    </Content>
}
```
")
            </CodeTemplate>
        </PresentationPart>
        <PresentationPart Title="表单验证">
            <Description>
                放到 <code>Form</code> 组件中可以兼容表单的验证注解。
            </Description>
            <RunTemplate>
                <Form Model="this">
                    <DataAnnotationsValidator />
                    <Field For="()=>SelectName">
                        <DropDownList DataSource="Users" @bind-Value="SelectName" Removable="true">
                            <DefaultItem>-请选择-</DefaultItem>
                        </DropDownList>
                    </Field>
                    <Button>提交</Button>
                </Form>
            </RunTemplate>
            <CodeTemplate>
        @Code.GetCode(@"
```html
<Form Model=""this"">
    <DataAnnotationsValidator/>
    <Field For=""()=>SelectName"">
        <DropDownList DataSource=""Users"" @bind-Value=""SelectName"" Removable=""true"">
            <DefaultItem>-请选择-</DefaultItem>
        </DropDownList>
    </Field>
    <Button>提交</Button>
</Form>
```
")
            </CodeTemplate>
        </PresentationPart>
        <PresentationPart Title="自定义默认项">
            <Description>
                设置 <code>DefaultItem</code> 用于初始化时的默认选项。
            </Description>
            <RunTemplate>
                <DropDownList @bind-Value="SelectUserName" DataSource="Users" Context="dropdown">
                    <ItemFormat>
                        <Avatar Source="@dropdown.Avatar" />
                        @dropdown.Name
                    </ItemFormat>
                    <DefaultItem>
                        --请选择--
                    </DefaultItem>
                </DropDownList>
            </RunTemplate>
            <CodeTemplate>
        @Code.GetCode(@"
```html
<DropDownList @bind-Value=""SelectUserName"" DataSource=""Users"" Context=""dropdown"">
    <ItemFormat>
        <Avatar Source=""@dropdown.Avatar"" />
        @dropdown.Name
    </ItemFormat>
    <DefaultItem>
        --请选择--
    </DefaultItem>
</DropDownList>
```
")
            </CodeTemplate>
        </PresentationPart>
        <PresentationPart Title="过滤">
            <Description>
                设置 <code>Filterable="true"</code> 可以过滤数据源。如果是一个实体对象，必须指定一个 <code>FilterField</code> 搜索框需要进行数据源检索的字段。
            </Description>
            <RunTemplate>
                <DropDownList DataSource="Users" Filterable="true" FilterField="@nameof(User.Name)" />
                <DropDownList DataSource="@(new List<string>
                                    {
                                        "中国","中东","美国","英国","法国","德国","南非","保加利亚","比利时","俄罗斯","白俄罗斯"
                                    })" Filterable="true" />
            </RunTemplate>
            <CodeTemplate>
        @Code.GetCode(@"
```html
<DropDownList DataSource=""Users"" Filterable=""true"" FilterField=""@nameof(User.Name)""/>
<DropDownList DataSource=""@(new List<string>
                            {
                                ""中国"",""中东"",""美国"",""英国"",""法国"",""德国"",""南非"",""保加利亚"",""比利时"",""俄罗斯"",""白俄罗斯""
                            })"" Filterable=""true""/>
```
")
            </CodeTemplate>
        </PresentationPart>
        <PresentationPart Title="可移除">
            <Description>
                设置 <code>Removable="true"</code> 显示一个“x”并在点击后移除选中项。
            </Description>
            <RunTemplate>
                <DropDownList DataSource="Users" Removable="true">
                    <DefaultItem>
                        -请选择-
                    </DefaultItem>
                </DropDownList>
            </RunTemplate>
            <CodeTemplate>
        @Code.GetCode(@"
```html
<DropDownList DataSource=""Users"" Removable=""true"">
    <DefaultItem>
        -请选择-
    </DefaultItem>
</DropDownList>
```
")
            </CodeTemplate>
        </PresentationPart>
        <PresentationPart Title="去掉边框">
            <Description>
                设置 <code>Selectable="false"</code> 会去掉边框。
            </Description>
            <RunTemplate>
                <DropDownList DataSource="Users" Selectable="false" />
                <DropDownList DataSource="Users" Selectable="false" Filterable="true" FilterField="@nameof(User.Name)" />
            </RunTemplate>
            <CodeTemplate>
        @Code.GetCode(@"
```html
<DropDownList DataSource=""Users"" Selectable=""false"" />
<DropDownList DataSource=""Users"" Selectable=""false"" Filterable=""true"" FilterField=""@nameof(User.Name)"" />
```
")
            </CodeTemplate>
        </PresentationPart>
        <PresentationPart Title="行内样式">
            <Description>
                设置 <code>Inline="true"</code> 可以与文本混搭。
            </Description>
            <RunTemplate>
                <Segment>
                    这里需要项目经理
                    <DropDownList DataSource="Users" Selectable="false" Inline="true">
                        <ItemFormat>
                            <Avatar Source="@context.Avatar" />
                            @context.Name
                        </ItemFormat>
                    </DropDownList>
                    审批，然后提交领导。
                </Segment>
            </RunTemplate>
            <CodeTemplate>
        @Code.GetCode(@"
```html
<Segment>
    这里需要项目经理
    <DropDownList DataSource=""Users"" Selectable=""false"" Inline=""true"">
        <ItemFormat>
            <Avatar Source=""@context.Avatar"" />
            @context.Name
        </ItemFormat>
    </DropDownList>
    审批，然后提交领导。
</Segment>
```
")
            </CodeTemplate>
        </PresentationPart>
        <PresentationPart Title="禁用状态">
            <Description>
                设置 <code>Disabled="true"</code> 可以禁用下拉列表。
            </Description>
            <RunTemplate>
                <DropDownList DataSource="Users" Disabled="true" />
            </RunTemplate>
            <CodeTemplate>
        @Code.GetCode(@"
```html
<DropDownList DataSource=""Users"" Disabled=""true"" />
```
")
            </CodeTemplate>
        </PresentationPart>
        <PresentationPart Title="尺寸">
            <Description>
                设置 <code>Size</code> 可以有不同尺寸。
            </Description>
            <RunTemplate>
                <DropDownList DataSource="Users" Size="Size.Mini"><DefaultItem>Mini</DefaultItem></DropDownList>
                <DropDownList DataSource="Users" Size="Size.Tiny"><DefaultItem>Tiny</DefaultItem></DropDownList>
                <DropDownList DataSource="Users" Size="Size.Small"><DefaultItem>Small</DefaultItem></DropDownList>
                <DropDownList DataSource="Users" Size="Size.Medium"><DefaultItem>Medium</DefaultItem></DropDownList>
                <DropDownList DataSource="Users" Size="Size.Large"><DefaultItem>Large</DefaultItem></DropDownList>
                <DropDownList DataSource="Users" Size="Size.Big"><DefaultItem>Big</DefaultItem></DropDownList>
                <DropDownList DataSource="Users" Size="Size.Huge"><DefaultItem>Huge</DefaultItem></DropDownList>
                <DropDownList DataSource="Users" Size="Size.Massive"><DefaultItem>Massive</DefaultItem></DropDownList>
            </RunTemplate>
            <CodeTemplate>
        @Code.GetCode(@"
```html
<DropDownList DataSource=""Users"" Size=""Size.Mini"" ><DefaultItem>Mini</DefaultItem></DropDownList>
<DropDownList DataSource=""Users"" Size=""Size.Tiny"" ><DefaultItem>Tiny</DefaultItem></DropDownList>
<DropDownList DataSource=""Users"" Size=""Size.Small"" ><DefaultItem>Small</DefaultItem></DropDownList>
<DropDownList DataSource=""Users"" Size=""Size.Medium"" ><DefaultItem>Medium</DefaultItem></DropDownList>
<DropDownList DataSource=""Users"" Size=""Size.Large""><DefaultItem>Large</DefaultItem></DropDownList>
<DropDownList DataSource=""Users"" Size=""Size.Big""><DefaultItem>Big</DefaultItem></DropDownList>
<DropDownList DataSource=""Users"" Size=""Size.Huge""><DefaultItem>Huge</DefaultItem></DropDownList>
<DropDownList DataSource=""Users"" Size=""Size.Massive"" ><DefaultItem>Massive</DefaultItem></DropDownList>
```
")
            </CodeTemplate>
        </PresentationPart>
        <PresentationPart Title="压缩内边距">
            <Description>
                设置 <code>Compact="true"</code> 使宽度与选项最大值一样。
            </Description>
            <RunTemplate>
                <DropDownList DataSource="Users" Compact="true" />
            </RunTemplate>
            <CodeTemplate>
        @Code.GetCode(@"
```html
<DropDownList DataSource=""Users"" Compact=""true""/>
```
")
            </CodeTemplate>
        </PresentationPart>
        <PresentationPart Title="反转背景颜色">
            <Description>
                设置 <code>Inverted="true"</code> 可以在反色背景中显示。
            </Description>
            <RunTemplate>
                <Segment Inverted="true">
                    <DropDownList DataSource="Users" Inverted="true" />
                </Segment>
            </RunTemplate>
            <CodeTemplate>
        @Code.GetCode(@"
```html
<Segment Inverted=""true"">
    <DropDownList DataSource=""Users"" Inverted=""true"" />
</Segment>
```
")
            </CodeTemplate>
        </PresentationPart>
        <PresentationPart Title="列数排版">
            <Description>
                设置 <code>ColSpan</code> 可以根据值进行列数的排版。
            </Description>
            <RunTemplate>

                <div class="ui form">
                    <Field>
                        <DropDownList DataSource="Users" ColSpan="ColSpan.Two2">
                            <DefaultItem>
                                两列
                            </DefaultItem>
                        </DropDownList>
                    </Field>
                    <Field>
                        <DropDownList DataSource="Users" ColSpan="ColSpan.Three3">
                            <DefaultItem>
                                三列
                            </DefaultItem>
                        </DropDownList>
                    </Field>
                    <Field>
                        <DropDownList DataSource="Users" ColSpan="ColSpan.Four4">
                            <DefaultItem>
                                四列
                            </DefaultItem>
                        </DropDownList>
                    </Field>
                    <Field>
                        <DropDownList DataSource="Users" ColSpan="ColSpan.Five5">
                            <DefaultItem>
                                五列
                            </DefaultItem>
                        </DropDownList>
                    </Field>
                </div>
            </RunTemplate>
            <CodeTemplate>
        @Code.GetCode(@"
```html
<Form Model=""this"">
    <Field>
        <DropDownList DataSource=""Users"" ColSpan=""ColSpan.Two2"">
            <DefaultItem>
                两列
            </DefaultItem>
        </DropDownList>
    </Field>
    <Field>
        <DropDownList DataSource=""Users"" ColSpan=""ColSpan.Three3"">
            <DefaultItem>
                三列
            </DefaultItem>
        </DropDownList>
    </Field>
    <Field>
        <DropDownList DataSource=""Users"" ColSpan=""ColSpan.Four4"">
            <DefaultItem>
                四列
            </DefaultItem>
        </DropDownList>
    </Field>
    <Field>
        <DropDownList DataSource=""Users"" ColSpan=""ColSpan.Five5"">
            <DefaultItem>
                五列
            </DefaultItem>
        </DropDownList>
    </Field>
</Form>
```
")
            </CodeTemplate>
        </PresentationPart>
        <PresentationPart Title="搜索时候选项最大值">
    <Description>
        设置 <code>MaxFilterItems</code> 可以规定显示在搜索列表中的最大数量，默认 10 个。
    </Description>
    <RunTemplate>
        <DropDownList DataSource="Users" MaxFilterItems="5"  Filterable="true" FilterField="@nameof(User.Name)"/>
    </RunTemplate>
    <CodeTemplate>
        @Code.GetCode(@"
```html
<DropDownList DataSource=""Users"" MaxFilterItems=""5""  Filterable=""true"" FilterField=""@nameof(User.Name)""/>
```
")
    </CodeTemplate>
</PresentationPart>
        <PresentationPart Title="自定义过滤方式">
    <Description>
        设置 <code>FilterExpression</code> 自定义过滤方式，这是一个委托。示例自定义了过滤规则，即过滤以输入内容结尾的结果。
    </Description>
    <RunTemplate>
        <DropDownList T="User" DataSource="Users" FilterExpression="@((input,value)=>value.Name.ToLower().EndsWith(input))" Filterable="true"/>
    </RunTemplate>
    <CodeTemplate>
        @Code.GetCode(@"
```html
<DropDownList T=""User"" DataSource=""Users"" FilterExpression=""@((input,value)=>value.Name.ToLower().EndsWith(input))"" Filterable=""true""/>
```
")
    </CodeTemplate>
</PresentationPart>
        <ParameterTable>
            <Content>
                <tr>
                    <td>Selectable</td>
                    <td>是否具有选择样式</td>
                    <td>bool</td>
                    <td>true</td>
                </tr>
                <tr>
                    <td>Filterable</td>
                    <td>对数据源是否可以直接进行过滤</td>
                    <td>bool</td>
                    <td></td>
                </tr>
                <tr>
                    <td>Up</td>
                    <td>菜单向上显示</td>
                    <td>bool</td>
                    <td></td>
                </tr>
                <tr>
                    <td>Fluid</td>
                    <td>把宽度设置为 100% 以此撑满整个父元素</td>
                    <td>bool</td>
                    <td></td>
                </tr>
                <tr>
                    <td>Actived</td>
                    <td>是否显示列表</td>
                    <td>bool</td>
                    <td></td>
                </tr>
                <tr>
                    <td>ItemFormat</td>
                    <td>对列表项呈现的 UI 内容</td>
                    <td>RenderFragment&lt;T></td>
                    <td></td>
                </tr>
                <tr>
                    <td>DefaultItem</td>
                    <td>初始化时的默认项 UI 内容</td>
                    <td>RenderFragment</td>
                    <td></td>
                </tr>
                <tr>
                    <td>FilterField</td>
                    <td>过滤时要搜索的字段，对复杂对象有效。</td>
                    <td>string</td>
                    <td></td>
                </tr>
                <tr>
                    <td>Removable</td>
                    <td>当选择项后显示一个“x”可移除选中项</td>
                    <td>bool</td>
                    <td></td>
                </tr>
                <tr>
                    <td>Disabled</td>
                    <td>禁用状态</td>
                    <td>bool</td>
                    <td></td>
                </tr>
                <tr>
                    <td>Inverted</td>
                    <td>反色背景</td>
                    <td>bool</td>
                    <td></td>
                </tr>
                <tr>
                    <td>Size</td>
                    <td>尺寸大小</td>
                    <td>bool</td>
                    <td></td>
                </tr>
                <tr>
                    <td>Compact</td>
                    <td>内边距的压缩</td>
                    <td>bool</td>
                    <td></td>
                </tr>
                <tr>
                    <td>ColSpan</td>
                    <td>下拉列表的列数排版</td>
                    <td>bool</td>
                    <td></td>
                </tr>
                <tr>
                    <td>Inline</td>
                    <td>行内样式模式</td>
                    <td>bool</td>
                    <td></td>
                </tr>
                <tr>
                    <td>Value</td>
                    <td>选中项的值，用于双向绑定</td>
                    <td>string</td>
                    <td></td>
                </tr>
                <tr>
                    <td>FilterExpression</td>
                    <td>用于自定义过滤数据源的表达式</td>
                    <td>Func&lt;string, T, bool></td>
                </tr>
                <tr>
                    <td>MaxFilterItems</td>
                    <td>过滤时的候选项显示的最大数</td>
                    <td>int</td>
                    <td>10</td>
                </tr>
            </Content>
        </ParameterTable>
        <CallbackTable>
            <Content>
                <tr>
                    <td>OnActive</td>
                    <td>当下拉列表显示或隐藏时触发的回调方法</td>
                    <td>EventCallback&lt;bool></td>
                </tr>
                <tr>
                    <td>OnItemSelected</td>
                    <td>当列表项被选中后触发的回调方法</td>
                    <td>EventCallback&lt;T></td>
                </tr>
                <tr>
                    <td>OnFiltering</td>
                    <td>当输入过滤值时触发的回调方法</td>
                    <td>EventCallback&lt;string></td>
                </tr>
            </Content>
        </CallbackTable>                
        <MethodTable>
            <Content>
                <tr>
                    <td>Active(bool active = true)</td>
                    <td>显示/隐藏下拉列表</td>
                </tr>
                <tr>
                    <td>Disable(bool disabled = true)</td>
                    <td>切换禁用/启用状态</td>
                </tr>
                <tr>
                    <td>SelectItem(T selectedItem)</td>
                    <td>选择指定列表的项</td>
                </tr>
                <tr>
                    <td>Filter(string input)</td>
                    <td>输入指定值并过滤检索数据</td>
                </tr>
            </Content>
        </MethodTable>
    </Body>
</Pager>

@code{
    [Display(Name ="用户")]
    [Required]
    string SelectUserName { get; set; }


    [Display(Name = "用户")]
    [Required]
    public string SelectName { get; set; }

    User SelectUser { get; set; }

    class User
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Avatar { get; set; }

        public override string ToString() => Name;
    }

    IReadOnlyList<User> Users => new List<User>
    {
        new User{ Id = 1, Name = "Zoe" , Avatar="/img/avatar/zoe.jpg" },
        new User{ Id = 2, Name = "Stevie" , Avatar="/img/avatar/stevie.jpg" },
        new User{ Id = 3, Name = "Jenny" , Avatar="/img/avatar/jenny.jpg" },
        new User{ Id = 4, Name = "Christian" , Avatar="/img/avatar/christian.jpg" },
        new User{ Id = 5, Name = "Ade" , Avatar="/img/avatar/ade.jpg" },
        new User{ Id = 6, Name = "Veronika" , Avatar="/img/avatar/veronika.jpg" },
        new User{ Id = 7, Name = "Nan" , Avatar="/img/avatar/nan.jpg" },
        new User{ Id = 8, Name = "Elliot" , Avatar="/img/avatar/elliot.jpg" }
    };
}