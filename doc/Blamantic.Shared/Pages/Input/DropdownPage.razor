@page "/component/input/dropdown"

<Pager DataSource="@(new List<string>(new[] { 
                         "Demo","ItemFormat","Up","Two-way Binding","DefaultItem","Form Validation",
                         "Removable","Selectable","Inline","Disabled","Size","Compact","Inverted","Span","Filterable","MaxFilterItems","FilterExpression","FilterEmptyContent"
                     }))">
    <Body>
        <Header1 Divider>
            Dropdown
            <SubHeader>
                A dropdown allows a user to select a value from a series of options
            </SubHeader>
        </Header1>
        <Segment>
            Data Source for demo:
        @Code.GetCode(@"
```csharp
class User
{
    public int Id { get; set; }
    public string Name { get; set; }
    public string Avatar { get; set; }

    public override string ToString() => Name;
}

IReadOnlyList<User> Users => new List<User>
{
    new User{ Id = 1, Name = ""Zoe"" , Avatar=""zoe.jpg"" },
    new User{ Id = 2, Name = ""Stevie"" , Avatar=""stevie.jpg"" },
    new User{ Id = 3, Name = ""Jenny"" , Avatar=""jenny.jpg"" },
    new User{ Id = 4, Name = ""Christian"" , Avatar=""christian.jpg"" },
    new User{ Id = 5, Name = ""Ade"" , Avatar=""ade.jpg"" },
    new User{ Id = 6, Name = ""Veronika"" , Avatar=""veronika.jpg"" },
    new User{ Id = 7, Name = ""Nan"" , Avatar=""nan.jpg"" },
    new User{ Id = 8, Name = ""Elliot"" , Avatar=""elliot.jpg"" }
};
```
")
        </Segment>

        <PresentationPart Title="Demo">
            <Description>
                <code>DataSource</code> is required.
            </Description>
            <RunTemplate>
                <DropDownList DataSource="Users" />
            </RunTemplate>
            <CodeTemplate>
        @Code.GetCode(@"
```html
<DropDownList DataSource=""Users""/>
```
")
            </CodeTemplate>
        </PresentationPart>
        <PresentationPart Title="ItemFormat">
            <Description>
                Custom the format of dropdown options.
            </Description>
            <RunTemplate>
                <DropDownList DataSource="Users">
                    <ItemFormat>
                        <Avatar Src="@context.Avatar" />
                        @context.Name
                    </ItemFormat>
                </DropDownList>
            </RunTemplate>
            <CodeTemplate>
        @Code.GetCode(@"
```html
<DropDownList DataSource=""Users"">
    <ItemFormat>
        <Avatar Src=""@context.Avatar"" />
        @context.Name
    </ItemFormat>
</DropDownList>
```
")
            </CodeTemplate>
        </PresentationPart>
        <PresentationPart Title="Up">
            <Description>
                A dropdown menu will automatically change which direction it opens if it can't fit on screen. If you need a dropdown to open in a specific direction you can specify it when initializing a dropdown.
            </Description>
            <RunTemplate>
                <DropDownList DataSource="Users" Up />
            </RunTemplate>
            <CodeTemplate>
        @Code.GetCode(@"
```html
<DropDownList DataSource=""Users"" Up/>
```
")
            </CodeTemplate>
        </PresentationPart>
        <PresentationPart Title="Two-way Binding">
            <Description>
                Only support <code>string</code> type.
            </Description>
            <RunTemplate>
                <DropDownList T="User" @bind-Value="SelectUserName" DataSource="Users" OnItemSelected="value=>SelectUser=value" />
                Value: @SelectUserName
                @if (SelectUser != null)
                {
                    <Content>
                        <Avatar Src="@SelectUser.Avatar" />
                        @SelectUser.Name
                    </Content>
                }
            </RunTemplate>
            <CodeTemplate>
        @Code.GetCode(@"
```html
<DropDownList TSource=""User"" @bind-Value=""SelectUserName"" DataSource=""Users"" OnItemSelected=""value=>SelectUser=value"" />
Value: @SelectUserName
@if (SelectUser != null)
{
    <Content>
        <Avatar Src=""@SelectUser.Avatar"" />
        @SelectUser.Name
    </Content>
}
```
")
            </CodeTemplate>
        </PresentationPart>
        <PresentationPart Title="DefaultItem">
            <RunTemplate>
                <DropDownList @bind-Value="SelectUserName" DataSource="Users" Context="dropdown">
                    <ItemFormat>
                        <Avatar Src="@dropdown.Avatar" />
                        @dropdown.Name
                    </ItemFormat>
                    <DefaultItem>
                        --Choose Item--
                    </DefaultItem>
                </DropDownList>
            </RunTemplate>
            <CodeTemplate>
        @Code.GetCode(@"
```html
<DropDownList @bind-Value=""SelectUserName"" DataSource=""Users"" Context=""dropdown"">
    <ItemFormat>
        <Avatar Src=""@dropdown.Avatar"" />
        @dropdown.Name
    </ItemFormat>
    <DefaultItem>
        --Choose Item--
    </DefaultItem>
</DropDownList>
```
")
            </CodeTemplate>
        </PresentationPart>
        
        <PresentationPart Title="Form Validation">
            <RunTemplate>
                <Form Model="this">
                    <DataAnnotationsValidator />
                    <Field For="()=>SelectName">
                        <DropDownList DataSource="Users" @bind-Value="SelectName" Removable>
                            <DefaultItem>-Choose-</DefaultItem>
                        </DropDownList>
                    </Field>
                    <Button>Submit</Button>
                </Form>
            </RunTemplate>
            <CodeTemplate>
        @Code.GetCode(@"
```html
<Form Model=""this"">
    <DataAnnotationsValidator/>
    <Field For=""()=>SelectName"">
        <DropDownList DataSource=""Users"" @bind-Value=""SelectName"" Removable>
            <DefaultItem>-Choose-</DefaultItem>
        </DropDownList>
    </Field>
    <Button>Submit</Button>
</Form>
```
")
            </CodeTemplate>
        </PresentationPart>
        <PresentationPart Title="Removable">
            <Description>
                A removable selection dropdown can allow a user to cancel to cancel a previous selection
            </Description>
            <RunTemplate>
                <DropDownList DataSource="Users" Removable>
                    <DefaultItem>
                        -Selection-
                    </DefaultItem>
                </DropDownList>
            </RunTemplate>
            <CodeTemplate>
        @Code.GetCode(@"
```html
<DropDownList DataSource=""Users"" Removable>
    <DefaultItem>
        -Selection-
    </DefaultItem>
</DropDownList>
```
")
            </CodeTemplate>
        </PresentationPart>
        <PresentationPart Title="Selectable">
            <Description>
                Set <code>Selectable="false"</code> to remove the border.
            </Description>
            <RunTemplate>
                <DropDownList DataSource="Users" Selectable="false" />
                <DropDownList DataSource="Users" Selectable="false" Filterable FilterField="@nameof(User.Name)" />
            </RunTemplate>
            <CodeTemplate>
        @Code.GetCode(@"
```html
<DropDownList DataSource=""Users"" Selectable=""false"" />
<DropDownList DataSource=""Users"" Selectable=""false"" Filterable FilterField=""@nameof(User.Name)"" />
```
")
            </CodeTemplate>
        </PresentationPart>
        <PresentationPart Title="Inline">
            <Description>
                A dropdown can be formatted to appear inline in other content
            </Description>
            <RunTemplate>
                <Segment>
                    Show me posts by
                    <DropDownList DataSource="Users" Selectable="false" Inline>
                        <ItemFormat>
                            <Avatar Src="@context.Avatar" />
                            @context.Name
                        </ItemFormat>
                    </DropDownList>                    
                </Segment>
            </RunTemplate>
            <CodeTemplate>
        @Code.GetCode(@"
```html
<Segment>
    Show me posts by
    <DropDownList DataSource=""Users"" Selectable=""false"" Inline>
        <ItemFormat>
            <Avatar Src=""@context.Avatar"" />
            @context.Name
        </ItemFormat>
    </DropDownList>
</Segment>
```
")
            </CodeTemplate>
        </PresentationPart>
        <PresentationPart Title="Disabled">
            <Description>
                A disabled dropdown menu or item does not allow user interaction
            </Description>
            <RunTemplate>
                <DropDownList DataSource="Users" Disabled />
            </RunTemplate>
            <CodeTemplate>
        @Code.GetCode(@"
```html
<DropDownList DataSource=""Users"" Disabled />
```
")
            </CodeTemplate>
        </PresentationPart>
        <PresentationPart Title="Size">
            <RunTemplate>
                <DropDownList DataSource="Users" Size="Size.Mini"><DefaultItem>Mini</DefaultItem></DropDownList>
                <DropDownList DataSource="Users" Size="Size.Tiny"><DefaultItem>Tiny</DefaultItem></DropDownList>
                <DropDownList DataSource="Users" Size="Size.Small"><DefaultItem>Small</DefaultItem></DropDownList>
                <DropDownList DataSource="Users" Size="Size.Medium"><DefaultItem>Medium</DefaultItem></DropDownList>
                <DropDownList DataSource="Users" Size="Size.Large"><DefaultItem>Large</DefaultItem></DropDownList>
                <DropDownList DataSource="Users" Size="Size.Big"><DefaultItem>Big</DefaultItem></DropDownList>
                <DropDownList DataSource="Users" Size="Size.Huge"><DefaultItem>Huge</DefaultItem></DropDownList>
                <DropDownList DataSource="Users" Size="Size.Massive"><DefaultItem>Massive</DefaultItem></DropDownList>
            </RunTemplate>
            <CodeTemplate>
        @Code.GetCode(@"
```html
<DropDownList DataSource=""Users"" Size=""Size.Mini"" ><DefaultItem>Mini</DefaultItem></DropDownList>
<DropDownList DataSource=""Users"" Size=""Size.Tiny"" ><DefaultItem>Tiny</DefaultItem></DropDownList>
<DropDownList DataSource=""Users"" Size=""Size.Small"" ><DefaultItem>Small</DefaultItem></DropDownList>
<DropDownList DataSource=""Users"" Size=""Size.Medium"" ><DefaultItem>Medium</DefaultItem></DropDownList>
<DropDownList DataSource=""Users"" Size=""Size.Large""><DefaultItem>Large</DefaultItem></DropDownList>
<DropDownList DataSource=""Users"" Size=""Size.Big""><DefaultItem>Big</DefaultItem></DropDownList>
<DropDownList DataSource=""Users"" Size=""Size.Huge""><DefaultItem>Huge</DefaultItem></DropDownList>
<DropDownList DataSource=""Users"" Size=""Size.Massive"" ><DefaultItem>Massive</DefaultItem></DropDownList>
```
")
            </CodeTemplate>
        </PresentationPart>
        <PresentationPart Title="Compact">
            <Description>
                A compact dropdown has no minimum width
            </Description>
            <RunTemplate>
                <DropDownList DataSource="Users" Compact />
            </RunTemplate>
            <CodeTemplate>
        @Code.GetCode(@"
```html
<DropDownList DataSource=""Users"" Compact/>
```
")
            </CodeTemplate>
        </PresentationPart>
        <PresentationPart Title="Inverted">
            <Description>
                A dropdown can be inverted
            </Description>
            <RunTemplate>
                <Segment Inverted>
                    <DropDownList DataSource="Users" Inverted />
                </Segment>
            </RunTemplate>
            <CodeTemplate>
        @Code.GetCode(@"
```html
<Segment Inverted>
    <DropDownList DataSource=""Users"" Inverted />
</Segment>
```
")
            </CodeTemplate>
        </PresentationPart>
        <PresentationPart Title="Span">
            <Description>
                A selection dropdown can allow menu to be equally divided so that more items can be glanced.
            </Description>
            <RunTemplate>

                <DropDownList DataSource="Users" Span="ColSpan.Two2" Fluid>
                    <DefaultItem>
                        Two Columns
                    </DefaultItem>
                </DropDownList>
                <DropDownList DataSource="Users" Span="ColSpan.Three3" Fluid>
                    <DefaultItem>
                        Three Columns
                    </DefaultItem>
                </DropDownList>
                <DropDownList DataSource="Users" Span="ColSpan.Four4" Fluid>
                    <DefaultItem>
                        Four Columns
                    </DefaultItem>
                </DropDownList>
                <DropDownList DataSource="Users" Span="ColSpan.Five5" Fluid>
                    <DefaultItem>
                        Five Columns
                    </DefaultItem>
                </DropDownList>
            </RunTemplate>
            <CodeTemplate>
        @Code.GetCode(@"
```html
<Form Model=""this"">
    <Field>
        <DropDownList DataSource=""Users"" Span=""ColSpan.Two2"">
            <DefaultItem>
                Two Columns
            </DefaultItem>
        </DropDownList>
    </Field>
    <Field>
        <DropDownList DataSource=""Users"" Span=""ColSpan.Three3"">
            <DefaultItem>
                Three Columns
            </DefaultItem>
        </DropDownList>
    </Field>
    <Field>
        <DropDownList DataSource=""Users"" Span=""ColSpan.Four4"">
            <DefaultItem>
                Four Columns
            </DefaultItem>
        </DropDownList>
    </Field>
    <Field>
        <DropDownList DataSource=""Users"" Span=""ColSpan.Five5"">
            <DefaultItem>
                Five Columns
            </DefaultItem>
        </DropDownList>
    </Field>
</Form>
```
")
            </CodeTemplate>
        </PresentationPart>


        
        <PresentationPart Title="Filterable">
            <Description>
                A dropdown can allow a user to search through a large list of choices.
            </Description>
            <RunTemplate>
                <DropDownList DataSource="@(new List<string>
                                    {
                                        "China","USA","UK","France","German","South Africa","Bulgaria","Belgium","Russia","Belarus"
                                    })" Filterable />

                <Message State="State.Warning">
                    You must specify <code>FilterField</code> of data source for complex data source.
                </Message>
                <DropDownList DataSource="Users" Filterable FilterField="@nameof(User.Name)" />
            </RunTemplate>
            <CodeTemplate>
        @Code.GetCode(@"
```html
<DropDownList DataSource=""@(new List<string>
                            {
                                ""China"",""USA"",""UK"",""France"",""German"",""South Africa"",""Bulgaria"",""Belgium"",""Russia"",""Belarus""
                            })"" Filterable/>

<DropDownList DataSource=""Users"" Filterable FilterField=""@nameof(User.Name)""/>
```
")
            </CodeTemplate>
        </PresentationPart>
        <PresentationPart Title="MaxFilterItems">
    <RunTemplate>
        <DropDownList DataSource="Users" MaxFilterItems="5"  Filterable FilterField="@nameof(User.Name)"/>
    </RunTemplate>
    <CodeTemplate>
        @Code.GetCode(@"
```html
<DropDownList DataSource=""Users"" MaxFilterItems=""5""  Filterable FilterField=""@nameof(User.Name)""/>
```
")
    </CodeTemplate>
</PresentationPart>
        <PresentationPart Title="FilterExpression">
    <RunTemplate>
        <DropDownList T="User" DataSource="Users" FilterExpression="@((input,value)=>value.Name.ToLower().EndsWith(input))" Filterable/>
    </RunTemplate>
    <CodeTemplate>
        @Code.GetCode(@"
```html
<DropDownList T=""User"" DataSource=""Users"" FilterExpression=""@((input,value)=>value.Name.ToLower().EndsWith(input))"" Filterable/>
```
")
    </CodeTemplate>
</PresentationPart>
                <PresentationPart Title="FilterEmptyContent">
                    <Description>
                        Customaize empty content while filtered result is nothing
                    </Description>
                    <RunTemplate>
                        <DropDownList DataSource="Users" MaxFilterItems="5" Filterable FilterField="@nameof(User.Name)">
                            <FilterEmptyContent>
                                I don't find anything.
                            </FilterEmptyContent>
                        </DropDownList>
                    </RunTemplate>
    <CodeTemplate>
        @Code.GetCode(@"
```html
<DropDownList DataSource=""Users"" MaxFilterItems=""5"" Filterable FilterField=""@nameof(User.Name)"">
    <FilterEmptyContent>
        I don't find anything.
    </FilterEmptyContent>
</DropDownList>
```
")
    </CodeTemplate>
</PresentationPart>
    </Body>
</Pager>

@code{
    [Display(Name ="User")]
    [Required]
    string SelectUserName { get; set; }


    [Display(Name = "User")]
    [Required]
    public string SelectName { get; set; }

    User SelectUser { get; set; }

    class User
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Avatar { get; set; }

        public override string ToString() => Name;
    }

    IReadOnlyList<User> Users => new List<User>
    {
        new User{ Id = 1, Name = "Zoe" , Avatar="/img/avatar/zoe.jpg" },
        new User{ Id = 2, Name = "Stevie" , Avatar="/img/avatar/stevie.jpg" },
        new User{ Id = 3, Name = "Jenny" , Avatar="/img/avatar/jenny.jpg" },
        new User{ Id = 4, Name = "Christian" , Avatar="/img/avatar/christian.jpg" },
        new User{ Id = 5, Name = "Ade" , Avatar="/img/avatar/ade.jpg" },
        new User{ Id = 6, Name = "Veronika" , Avatar="/img/avatar/veronika.jpg" },
        new User{ Id = 7, Name = "Nan" , Avatar="/img/avatar/nan.jpg" },
        new User{ Id = 8, Name = "Elliot" , Avatar="/img/avatar/elliot.jpg" }
    };
}