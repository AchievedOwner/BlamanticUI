@page "/component/feedback/progress"

<Pager DataSource="@(new List<string>(new[] { 
                         "Demo","Indicating","Show Percent","Customize Percent Text","Active","Disabled","State","Animation",
                         "Speed","Color","Inverted","Size","Attached","Multiple Bars"
                     }))">
    <Body>
        <Header1 Divider>
            Progress
            <SubHeader>A progress bar shows the progression of a task</SubHeader>
        </Header1>
        <PresentationPart Title="Demo">
            <Description>
                A standard progress bar
            </Description>
            <RunTemplate>
                <Progress Percent="60"/>
            </RunTemplate>
            <CodeTemplate>
@Code.GetCode(@"
```html
<Progress Percent=""60""/>
```
")
            </CodeTemplate>
        </PresentationPart>
               <PresentationPart Title="Indicating">
                    <Description>
                        An indicating progress bar visually indicates the current level of progress of a task
                    </Description>
            <RunTemplate>
                <Progress Percent="percent" Indicating/>
                <Button Disabled="disable" @onclick="()=>Start()" Emphasis="Emphasis.Primary">开始</Button>
            </RunTemplate>
            <CodeTemplate>
@Code.GetCode(@"
```html
<Progress Percent=""percent"" Indicating>
<Button Disabled=""disable"" @onclick=""()=>Start()"" Emphasis=""Emphasis.Primary"">开始</Button>
```
```csharp
int percent;
bool disable;
System.Timers.Timer _timer;
protected override void OnInitialized()
{
    _timer = new System.Timers.Timer(60);
    _timer.Elapsed += async (s, e) =>
    {
        if (percent < 100)
        {
            percent++;
        }
        else
        {
            _timer.Stop();
            disable = false;
        }
        await InvokeAsync(StateHasChanged);
    };
}

void Start()
{
    percent = 0;
    disable = true;
    _timer.Start();
}
```
")
            </CodeTemplate>
        </PresentationPart>
         <PresentationPart Title="Show Percent">
            <Description>
                A progress bar can contain a text value indicating current progress
            </Description>
    <RunTemplate>
        <Progress Percent="80" ShowPercent/>
    </RunTemplate>
    <CodeTemplate>
        @Code.GetCode(@"
```html
<Progress Percent=""80"" ShowPercent />
```
")
    </CodeTemplate>
</PresentationPart>
       <PresentationPart Title="Customize Percent Text">
    <RunTemplate>
        <Progress Percent="80">
                    Current @(context)%
        </Progress>
        <Progress Percent="50" Centered>
            
                Raimining @(100-context)%
            
        </Progress>
    </RunTemplate>
    <CodeTemplate>
        @Code.GetCode(@"
```html
<Progress Percent=""80"">
    Current @(context)%
</Progress>
<Progress Percent=""50"" Centered>
    Raimining @(100-context)%
</Progress>
```
")
    </CodeTemplate>
</PresentationPart>
        <PresentationPart Title="Active">
            <Description>
                A progress bar can show activity
            </Description>
    <RunTemplate>
        <Progress Percent="76" Actived />
    </RunTemplate>
    <CodeTemplate>
        @Code.GetCode(@"
```html
<Progress Percent=""76"" Actived />
```
")
    </CodeTemplate>
</PresentationPart>
                <PresentationPart Title="Disabled">
                    <Description>
                        A progress bar can be disabled
                    </Description>
    <RunTemplate>
        <Progress Percent="43" Disabled />
    </RunTemplate>
    <CodeTemplate>
        @Code.GetCode(@"
```html
<Progress Percent=""43"" Disabled />
```
")
    </CodeTemplate>
</PresentationPart>
        <PresentationPart Title="State">
            <Description>
                A progress bar can show an state color
            </Description>
    <RunTemplate>
        <Progress Percent="100" State="State.Success" ShowPercent>
            <Label>Everything worked, your file is all ready.</Label>
        </Progress>
        <Progress Percent="100" State="State.Warning">
            <Label>Your file didn't meet the minimum resolution requirements.</Label>
        </Progress>
        <Progress Percent="100" State="State.Error">
            <Label>There was an error.</Label>
        </Progress>
    </RunTemplate>
    <CodeTemplate>
        @Code.GetCode(@"
```html
<Progress Percent=""100"" State=""State.Success"">
    <Label>Everything worked, your file is all ready.</Label>
</Progress>
<Progress Percent=""100"" State=""State.Warning"">
    <Label>Your file didn't meet the minimum resolution requirements.</Label>
</Progress>
<Progress Percent=""100"" State=""State.Error"">
    <Label>There was an error.</Label>
</Progress>
```
")
    </CodeTemplate>
</PresentationPart>
        <PresentationPart Title="Animation">
            <Description>
                A progress bar can be shown in different animation style
            </Description>
    <RunTemplate>
        <Progress Percent="100" Color="Color.Blue" Animation="Progress.AnimationType.Pulsate">
                Pulsate
        </Progress>
        <Progress Percent="100" Color="Color.Blue" Animation="Progress.AnimationType.Fill">
                Fill
        </Progress>
        <Progress Percent="100" Color="Color.Blue" Animation="Progress.AnimationType.Slide">
                Slide
        </Progress>
        <Progress Percent="100" Color="Color.Blue" Animation="Progress.AnimationType.Swing">
                Swing
        </Progress>
    </RunTemplate>
    <CodeTemplate>
        @Code.GetCode(@"
```html
<Progress Color=""Color.Blue"" Animation=""Progress.AnimationType.Pulsate"">
    Pulsate
</Progress>
<Progress Color=""Color.Blue"" Animation=""Progress.AnimationType.Fill"">
    Fill
</Progress>
<Progress Color=""Color.Blue"" Animation=""Progress.AnimationType.Slide"">
    Slide
</Progress>
<Progress Color=""Color.Blue"" Animation=""Progress.AnimationType.Swing"">
    Swing
</Progress>
```
")
    </CodeTemplate>
</PresentationPart>
        <PresentationPart Title="Speed">
            <Description>
                progress can also vary in speed
            </Description>
    <RunTemplate>
        <Progress Percent="100" Color="Color.Blue" Animation="Progress.AnimationType.Pulsate" Speed="Speed.Fast">
                Fast
        </Progress>
        <Progress Percent="100" Color="Color.Blue" Animation="Progress.AnimationType.Pulsate" Speed="Speed.Slow">
                Slow
        </Progress>
    </RunTemplate>
    <CodeTemplate>
        @Code.GetCode(@"
```html
<Progress Percent=""100"" Color=""Color.Blue"" Animation=""Progress.AnimationType.Pulsate"" Speed=""Speed.Fast"">
    Fast
</Progress>
<Progress Percent=""100"" Color=""Color.Blue"" Animation=""Progress.AnimationType.Pulsate"" Speed=""Speed.Slow"">
    Slow
</Progress>
```
")
    </CodeTemplate>
</PresentationPart>
        <PresentationPart Title="Color">
            <Description>
                Can have different colors:
            </Description>
    <RunTemplate>
        <Progress Color="Color.Red" Percent="95"/>
        <Progress Color="Color.Green" Percent="15" />
        <Progress Color="Color.Yellow" Percent="76" />
        <Progress Color="Color.Pink" Percent="35" />
        <Progress Color="Color.Olive" Percent="66" />
        <Progress Color="Color.Orange" Percent="28" />
        <Progress Color="Color.Black" Percent="80" />
        <Progress Color="Color.Blue" Percent="56" />
        <Progress Color="Color.Brown" Percent="42" />
        <Progress Color="Color.Purple" Percent="74" />
    </RunTemplate>
    <CodeTemplate>
        @Code.GetCode(@"
```html
<Progress Color=""Color.Red"" Percent=""95""/>
<Progress Color=""Color.Green"" Percent=""15""/>
<Progress Color=""Color.Yellow"" Percent=""76""/>
<Progress Color=""Color.Pink"" Percent=""35""/>
<Progress Color=""Color.Olive"" Percent=""66""/>
<Progress Color=""Color.Orange"" Percent=""28""/>
<Progress Color=""Color.Black"" Percent=""80""/>
<Progress Color=""Color.Blue"" Percent=""56""/>
<Progress Color=""Color.Brown"" Percent=""42""/>
<Progress Color=""Color.Purple"" Percent=""74""/>
```
")
    </CodeTemplate>
</PresentationPart>
        <PresentationPart Title="Inverted">
            <Description>
                A progress bar can have its colors inverted
            </Description>
    <RunTemplate>
        <Segment Inverted>
            <Progress Color="Color.Red" Percent="95" Inverted />
            <Progress Color="Color.Green" Percent="15" Inverted />
            <Progress Color="Color.Yellow" Percent="76" Inverted />
            <Progress Color="Color.Pink" Percent="35" Inverted />
            <Progress Color="Color.Olive" Percent="66" Inverted />
            <Progress Color="Color.Orange" Percent="28" Inverted />
            <Progress Color="Color.Black" Percent="80" Inverted />
            <Progress Color="Color.Blue" Percent="56" Inverted />
            <Progress Color="Color.Brown" Percent="42" Inverted />
            <Progress Color="Color.Purple" Percent="74" Inverted />
        </Segment>
    </RunTemplate>
    <CodeTemplate>
        @Code.GetCode(@"
```html
<Segment Inverted>
    <Progress Color=""Color.Red"" Percent=""95"" Inverted/>
    <Progress Color=""Color.Green"" Percent=""15"" Inverted/>
    <Progress Color=""Color.Yellow"" Percent=""76"" Inverted/>
    <Progress Color=""Color.Pink"" Percent=""35"" Inverted/>
    <Progress Color=""Color.Olive"" Percent=""66"" Inverted/>
    <Progress Color=""Color.Orange"" Percent=""28"" Inverted/>
    <Progress Color=""Color.Black"" Percent=""80"" Inverted/>
    <Progress Color=""Color.Blue"" Percent=""56"" Inverted/>
    <Progress Color=""Color.Brown"" Percent=""42"" Inverted/>
    <Progress Color=""Color.Purple"" Percent=""74"" Inverted/>
</Segment>
```
")
    </CodeTemplate>
</PresentationPart>
        <PresentationPart Title="Size">
    <RunTemplate>
        <Progress Percent="81" Size="Size.Mini" />
        <Progress Percent="95" Size="Size.Tiny" />
        <Progress Percent="43" Size="Size.Small" />
        <Progress Percent="50" Size="Size.Medium" />
        <Progress Percent="66" Size="Size.Large" />
        <Progress Percent="37" Size="Size.Big" />
        <Progress Percent="82" Size="Size.Huge" />
        <Progress Percent="62" Size="Size.Massive" />
    </RunTemplate>
    <CodeTemplate>
        @Code.GetCode(@"
```html
<Progress Percent=""81"" Size=""Size.Mini""/>
<Progress Percent=""95"" Size=""Size.Tiny""/>
<Progress Percent=""43"" Size=""Size.Small""/>
<Progress Percent=""50"" Size=""Size.Medium""/>
<Progress Percent=""66"" Size=""Size.Large""/>
<Progress Percent=""37"" Size=""Size.Big""/>
<Progress Percent=""82"" Size=""Size.Huge""/>
<Progress Percent=""62"" Size=""Size.Massive""/>
```
")
    </CodeTemplate>
</PresentationPart>
        <PresentationPart Title="Attached">
            <Description>
                A progress bar can show progress of an element
            </Description>
    <RunTemplate>
        <Segment>
            <Progress Percent="70" Attached AttachedVertical="VerticalPosition.Top"/>
            <p>
                阿里路呀
            </p>
            <Progress Percent="40" Attached AttachedVertical="VerticalPosition.Bottom"/>
        </Segment>
    </RunTemplate>
    <CodeTemplate>
        @Code.GetCode(@"
```html
<Segment>
    <Progress Percent=""70"" Attached AttachedVertical=""VerticalPosition.Top""/>
    <p>
        阿里路呀
    </p>
    <Progress Percent=""40"" Attached AttachedVertical=""VerticalPosition.Bottom""/>
</Segment>
```
")
    </CodeTemplate>
</PresentationPart>

        <PresentationPart Title="Multiple Bars">
            <Description>
                A progress element can have multiple bars.
            </Description>
            <RunTemplate>
                <Message State="State.Warning">
                    You have to make sure the sum of percent for each bars equals to 100.
                </Message>

                <Progress>
                    <Bars>
                        <Bar Percent="30" Color="Color.Red" />
                        <Bar Percent="20" Color="Color.Blue" />
                        <Bar Percent="40" Color="Color.Green" />
                        <Bar Percent="10" Color="Color.Yellow" />
                    </Bars>
                </Progress>
                <Progress>
                    <Bars>
                        <Bar Percent="15" Color="Color.Red" >VIP @(context)%</Bar>
                        <Bar Percent="55" Color="Color.Blue" ShowPercent="true" Centered/>
                        <Bar Percent="25" Color="Color.Green">Merged @(context)%</Bar>
                        <Bar Percent="5" Color="Color.Yellow" />
                    </Bars>
                    <Label>
                        Tickets
                    </Label>
                </Progress>
            </RunTemplate>
            <CodeTemplate>
                @Code.GetCode(@"
```html
<Progress>
    <Bars>
        <Bar Percent=""30"" Color=""Color.Red"" />
        <Bar Percent=""20"" Color=""Color.Blue"" />
        <Bar Percent=""40"" Color=""Color.Green"" />
        <Bar Percent=""10"" Color=""Color.Yellow"" />
    </Bars>
</Progress>
<Progress>
    <Bars>
        <Bar Percent=""15"" Color=""Color.Red"" >VIP @(context)%</Bar>
        <Bar Percent=""55"" Color=""Color.Blue"" ShowPercent=""true"" Centered/>
        <Bar Percent=""25"" Color=""Color.Green"">Merged  @(context)%</Bar>
        <Bar Percent=""5"" Color=""Color.Yellow"" />
    </Bars>
    <Label>
        Tickets
    </Label>
</Progress>
```
")
            </CodeTemplate>
        </PresentationPart>
    </Body>
</Pager>

@code{
    int percent;
    bool disable;
    System.Timers.Timer _timer;
    protected override void OnInitialized()
    {
        _timer = new System.Timers.Timer(60);
        _timer.Elapsed += async (s, e) =>
        {
            if (percent < 100)
            {
                percent++;
            }
            else
            {
                _timer.Stop();
                disable = false;
            }
            await InvokeAsync(StateHasChanged);
        };
    }

    void Start()
    {
        percent = 0;
        disable = true;
        _timer.Start();
    }
}